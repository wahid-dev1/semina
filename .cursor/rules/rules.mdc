# üè• Medical POS System ‚Äî **API Product Requirements Document (PRD)**

## 0. Overview

The **Medical POS System API** is a backend platform built with **NestJS + MongoDB** that enables a **Software Provider** to manage **Franchise Companies**, each containing multiple **Branches**.

Each **Branch** manages its **employees, customers, services, and orders** independently, while the **Software Provider** maintains centralized monitoring, analytics, and configuration control.

The API powers:

* üßë‚Äçüíº A **Franchise Portal** for company and branch admins
* üë©‚Äç‚öïÔ∏è A **Customer App** (via QR login or credentials)

---

## 1. System Hierarchy

```
Software Provider
 ‚îî‚îÄ‚îÄ Company (Franchise)
      ‚îú‚îÄ‚îÄ Branches
      ‚îÇ    ‚îú‚îÄ‚îÄ Employees
      ‚îÇ    ‚îú‚îÄ‚îÄ Customers
      ‚îÇ    ‚îú‚îÄ‚îÄ Orders
      ‚îÇ    ‚îú‚îÄ‚îÄ Services
      ‚îÇ    ‚îú‚îÄ‚îÄ Products
      ‚îÇ    ‚îú‚îÄ‚îÄ Subscriptions
      ‚îÇ    ‚îî‚îÄ‚îÄ Settings
```

---

## 2. Tech Stack

| Layer      | Technology                                     |
| ---------- | ---------------------------------------------- |
| Framework  | NestJS                                         |
| Database   | MongoDB (Mongoose ODM)                         |
| Cache      | Redis (sessions, QR codes, tokens)             |
| Storage    | S3-compatible storage (files, 3D scans, logos) |
| Auth       | JWT + One-time QR code                         |
| Email      | SMTP / SendGrid                                |
| API Format | RESTful JSON                                   |

---

## 3. Modules Overview

| #  | Module        | Description                                          |
| -- | ------------- | ---------------------------------------------------- |
| 1  | Companies     | Manage franchise-level data (Software Provider only) |
| 2  | Branches      | Manage individual franchise branches                 |
| 3  | Employees     | Branch-level POS users                               |
| 4  | Customers     | Medical customers and related data                   |
| 5  | Orders        | POS transactions                                     |
| 6  | Products      | Globally managed items/services                      |
| 7  | Subscriptions | Link products to franchise companies                 |
| 8  | Medical Form  | Create customers via health intake form              |
| 9  | Dashboard     | Analytics and branch KPIs                            |
| 10 | Auth          | Authentication and QR login                          |
| 11 | Audit & Logs  | Track actions and access events                      |

---

## 4. Company Module

### Purpose

Represents a **Franchise Company**, created by the **Software Provider**.
Branches belong to companies.

### Fields

```ts
{
  _id: ObjectId,
  name: string,
  contactPerson: string,
  email: string,
  phone: string,
  address: string,
  enabled: boolean,
  providerId: ObjectId,
  createdAt: Date
}
```

### Endpoints

```
GET    /companies
GET    /companies/:id
POST   /companies
PATCH  /companies/:id
DELETE /companies/:id
```

---

## 5. Branch Module

### Purpose

Represents a **physical branch** of a company.

### Fields

#### Master Data

| Field           | Type     | Description             |
| --------------- | -------- | ----------------------- |
| branchName      | string   | Branch display name     |
| contactPerson   | string   | Responsible person      |
| address         | string   | Full address            |
| phone           | string   | Contact phone           |
| email           | string   | Contact email           |
| timezone        | string   | Local time zone         |
| enabled         | boolean  | Active/Inactive         |
| visibleToOthers | boolean  | Inter-branch visibility |
| companyId       | ObjectId | Parent company          |

#### Opening Hours

```ts
{
  day: 'monday' | 'tuesday' | ...,
  open: string,  // "08:00"
  close: string, // "18:00"
  isClosed: boolean
}
```

#### Services

```ts
{
  name: string,
  type: 'treatment' | 'consultation' | 'wellness' | 'custom',
  maxResource: number,
  resourceUsed: number,
  active: boolean
}
```

#### App Settings

```ts
{
  logoUrl: string,
  appInvitationMessage: string,
  appGiftMessage: string
}
```

#### Cancellation Policy

```ts
{
  periodHours: number,
  penaltyApplicable: boolean
}
```

#### Calendar Settings

```ts
{
  timeIntervalMinutes: number,
  allowMultiServiceBooking: boolean
}
```

### Endpoints

```
GET    /branches
GET    /branches/:id
POST   /branches
PATCH  /branches/:id
DELETE /branches/:id
```

---

## 6. Employees Module

### Purpose

Manage branch employees (admins, managers, POS operators).

### Fields

```ts
{
  _id: ObjectId,
  username: string,
  firstname: string,
  lastname: string,
  email: string,
  password: string,
  personalPin: string,
  branchId: ObjectId,
  enabled: boolean,
  role: 'admin' | 'manager' | 'operator',
  language: string,
  lastLogin: Date
}
```

### Endpoints

```
GET    /employees
POST   /employees
PATCH  /employees/:id
DELETE /employees/:id
```

---

## 7. Customers Module

### Purpose

Manage **medical customers**. Customers can be created:

1. Automatically via medical form submission (public)
2. Manually by a branch employee (private)

### Fields

```ts
{
  _id: ObjectId,
  firstname: string,
  lastname: string,
  email: string,
  phone?: string,
  branchId: ObjectId,
  createdAt: Date,
  lastVisit?: Date,
  qrCodeId?: ObjectId,
  medicalHistoryId?: ObjectId
}
```

### Endpoints

```
GET    /customers
GET    /customers/:id
POST   /customers          // manual creation by employee
PATCH  /customers/:id
GET    /customers/:id/medical-history
GET    /customers/:id/orders
```

---

## 8. Medical Form Module

### Purpose

Public-facing form to create new **Customer + MedicalHistory + One-time QR login**.

### Behavior

1. User submits form with personal + medical data.
2. System creates:

   * `Customer`
   * `MedicalHistory`
   * `QRCode` (one-time)
3. Sends optional welcome email.
4. QR becomes invalid after first use.

### Fields

```ts
{
  branchId: ObjectId,
  personalData: {...},
  fieldOfApplication: string,
  pregnancy?: boolean,
  diseases?: string[],
  healthIssues?: string[],
  drugsImplants?: string[],
  termsAccepted: boolean,
  signature?: string
}
```

### Endpoints

```
POST /medical-form/submit
GET  /medical-form/options
```

---

## 9. Orders Module

### Purpose

Track POS orders and payments per customer.

### Fields

```ts
{
  _id: ObjectId,
  createdAt: Date,
  customerId: ObjectId,
  customerName: string,
  branchId: ObjectId,
  productId: ObjectId,
  productName: string,
  price: number,
  paymentMethod: string,
  status: 'pending' | 'paid' | 'canceled'
}
```

### Endpoints

```
GET    /orders
GET    /orders/stats
POST   /orders
PATCH  /orders/:id
DELETE /orders/:id
```

---

## 10. Products & Subscriptions

### Products

Globally managed by **Software Provider**, but can be customized per branch.

```ts
{
  _id: ObjectId,
  name: string,
  description: string,
  type: 'service' | 'product',
  price: number,
  active: boolean,
  branchId?: ObjectId
}
```

### Subscriptions

Link franchises to products.

```ts
{
  _id: ObjectId,
  franchiseId: ObjectId,
  productIds: ObjectId[],
  startDate: Date,
  endDate: Date,
  active: boolean
}
```

### Endpoints

```
GET  /products
POST /products
GET  /subscriptions
POST /subscriptions
```

---

## 11. Dashboard Module

### Purpose

Provide real-time analytics and operational KPIs.

### Metrics

* Number of customers
* Total turnover
* Products sold today
* Workload per weekday
* Most active customers
* Recent customer registrations
* Last employee logins

### Endpoints

```
GET /dashboard/summary
GET /dashboard/branch-stats
GET /dashboard/recent-logins
```

---

## 12. Authentication & Authorization

### Methods

1. Email + Password
2. One-Time QR Code (for customers)

### Entities

* `Employee`
* `Customer`
* `QRCode`
* `Session`

### Endpoints

```
POST /auth/login
POST /auth/login-qr
POST /auth/refresh
POST /auth/logout
```

### Roles (RBAC)

| Role         | Scope                               |
| ------------ | ----------------------------------- |
| **Admin**    | Full branch control                 |
| **Manager**  | Manage employees, customers, orders |
| **Operator** | POS and order processing only       |

---

## 13. QR Authentication Flow

1. Customer submits **medical form**.
2. System generates one-time QR.
3. Customer scans QR ‚Üí verified ‚Üí JWT issued.
4. QR marked **invalid** immediately after login.

---

## 14. Audit & Analytics

Track:

* CRUD operations per employee
* Logins, order updates, cancellations
* Branch-level performance over time

---

## 15. Database Collections (MongoDB)

| Collection          | Description                   |
| ------------------- | ----------------------------- |
| `providers`         | Software providers            |
| `companies`         | Franchise companies           |
| `branches`          | Branch info + configuration   |
| `employees`         | Branch employees              |
| `customers`         | Medical customers             |
| `medical_histories` | Full medical intake forms     |
| `qrcodes`           | One-time login codes          |
| `sessions`          | Active JWT sessions           |
| `orders`            | POS orders                    |
| `products`          | Products and services         |
| `subscriptions`     | Product access for franchises |
| `audit_logs`        | System and user actions       |

---

## 16. Integration Notes

* All collections indexed by `_id`
* Relationships via `ObjectId` references
* Embedded docs for configuration blocks (branch settings, openingHours)
* JWT tokens stored in Redis for session invalidation
* File uploads stored in S3
* MongoDB transactions ensure atomic order & stock consistency

---

## 17. Example Document (Branch)

```json
{
  "_id": "6711f0a2e8b1a6",
  "branchName": "WellCare Berlin",
  "contactPerson": "Dr. Anna Meier",
  "address": "Kurf√ºrstendamm 123, 10711 Berlin, Germany",
  "phone": "+49 30 123456",
  "email": "berlin@wellcare.com",
  "timezone": "Europe/Berlin",
  "openingHours": [
    { "day": "monday", "open": "08:00", "close": "18:00", "isClosed": false },
    { "day": "sunday", "isClosed": true }
  ],
  "services": [
    { "name": "Cryotherapy", "type": "treatment", "maxResource": 3, "resourceUsed": 1, "active": true }
  ],
  "appSettings": {
    "logoUrl": "https://cdn.example.com/berlin-logo.png",
    "appInvitationMessage": "Welcome to WellCare!",
    "appGiftMessage": "Enjoy your first session on us!"
  },
  "cancellationPolicy": {
    "periodHours": 24,
    "penaltyApplicable": true
  },
  "calendarSettings": {
    "timeIntervalMinutes": 30,
    "allowMultiServiceBooking": true
  },
  "enabled": true,
  "visibleToOthers": false,
  "companyId": "6711e88d4b5a1c"
}
```

---

## ‚úÖ Key Design Fixes (Summary)

| Issue                       | Fix                                                                      |
| --------------------------- | ------------------------------------------------------------------------ |
| Missing company creation    | Added **Company Module**                                                 |
| Customer creation confusion | Split into **/customers** (manual) and **/medical-form/submit** (public) |
| branchId for customers      | Always required; inferred from form or assigned manually                 |
| Role hierarchy clarified    | Provider ‚Üí Company ‚Üí Branch ‚Üí Employee ‚Üí Customer                        |